#!/bin/bash

EXPERIMENT_PURPOSE="std_005_bias_01_new_autoencoder"
LOCAL_BASE_STAGING_DIR="./temp1"
GDRIVE_TARGET_BASE_PATH="google-drive:auto_sync/${EXPERIMENT_PURPOSE}"
MAX_JOBS=2  # 新增变量，控制最大并行任务数

mkdir -p "${LOCAL_BASE_STAGING_DIR}"

# 待处理的 seed 列表
SEEDS=(3047 114514 65536 4999)

# 遍历所有 seed，启动后台任务
for seed in "${SEEDS[@]}"; do
    # 使用子 shell (...) & 将每个循环的任务作为一个整体在后台运行
    (
        echo "======================================================"
        echo "🌱 Starting experiment for seed: ${seed} (Purpose: ${EXPERIMENT_PURPOSE})"
        echo "======================================================"

        CURRENT_SEED_LOCAL_OUTPUT_DIR="${LOCAL_BASE_STAGING_DIR}/experiment_seed_${seed}"
        mkdir -p "${CURRENT_SEED_LOCAL_OUTPUT_DIR}"
        echo "Local staging directory for seed ${seed}: ${CURRENT_SEED_LOCAL_OUTPUT_DIR}"

        echo "Starting Python experiment script for seed ${seed}..."
        ./run_experiment_queue.py \
            -okbe \
            --nohup \
            --queue ltari \
            --seed "$seed" \
            --google-drive-path "${CURRENT_SEED_LOCAL_OUTPUT_DIR}"
        script_exit_code=$?

        if [ ${script_exit_code} -eq 0 ]; then
            echo "✅ Experiment for seed ${seed} completed successfully."
        else
            echo "❌ Experiment for seed ${seed} failed with exit code ${script_exit_code}."
        fi
        echo "------------------------------------------------------"
    ) & # 将子 shell 放入后台执行

    # 控制并行任务数量
    # 当后台任务数量达到 MAX_JOBS 时，等待任一任务完成再继续
    while [[ $(jobs -p | wc -l) -ge ${MAX_JOBS} ]]; do
        sleep 1
    done
done

# 等待所有后台任务执行完毕
echo "⏳ Waiting for all background experiments to complete..."
wait
echo "All experiments have finished."
echo ""

# 所有实验完成后，开始同步
echo "☁️ Syncing ALL results in ${LOCAL_BASE_STAGING_DIR} to ${GDRIVE_TARGET_BASE_PATH}"
rclone sync "${LOCAL_BASE_STAGING_DIR}" "${GDRIVE_TARGET_BASE_PATH}" --progress
sync_exit_code=$?

if [ ${sync_exit_code} -eq 0 ]; then
    echo "👍 Global sync completed successfully."

    if [ -d "${LOCAL_BASE_STAGING_DIR}" ]; then
        echo "🗑️ Deleting local staging directory: ${LOCAL_BASE_STAGING_DIR}"
        rm -rf "${LOCAL_BASE_STAGING_DIR}"
        if [ $? -eq 0 ]; then
            echo "✅ Local staging directory deleted successfully."
        else
            echo "⚠️ Failed to delete local staging directory."
        fi
    fi
else
    echo "⚠️ Global sync failed. Local files are kept at ${LOCAL_BASE_STAGING_DIR} for inspection."
fi

echo "🎉 All experiments for purpose '${EXPERIMENT_PURPOSE}' have been processed."